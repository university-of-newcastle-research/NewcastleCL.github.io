#!/usr/bin/env python3
from pathlib import Path
from datetime import date
import sys
import frontmatter

preamble = '''---
layout: post
title: {title}
tags: [{tags}]
author: {author}
excerpt_separator: <!--more-->
---

'''

root = 'NewcastleCL.github.io'


def get_root_folders(filename):
    folder = filename.resolve().parent
    while (folder.name != root):
        folder = folder.parent
        if folder.name == '/':
            raise RuntimeError('Did not find root folder')
    return Path(folder, 'media'), Path(folder, '_posts')


def get_frontmatter(filename):
    rmd = Path(filename.parent, filename.stem + '.Rmd')
    return frontmatter.load(rmd)


def get_contents(filename):
    try:
        with open(filename, 'r') as f:
            return f.read()
    except IOError as e:
        print("File not found", filename)
        raise RuntimeError("Bad filename") from e


def get_image_folder(filename):
    img_folder = Path(filename.parent, filename.stem + '_files')
    return img_folder


def get_values(config):
    vals = dict()
    info = {
        'title': 'What is the title of the post? ',
        'tags': 'What tags should be added to the post (comma separated list) ',
        'author': 'What is the Author name? '
    }

    for key in info:
        if key in config:
            vals[key] = config[key]
            print(f'{key} was set to {config[key]}')
        else:
            vals[key] = input(info[key])
    return vals


def edit_image_links(current, folder_name):
    lines = current.splitlines()
    output = []
    old_path, new_path = str(folder_name), str('/media' / folder_name)
    for line in lines:
        if old_path in line:
            output.append(line.replace(old_path, new_path))
        else:
            output.append(line)
    return '\n'.join(output)


def update_contents(filename, new_contents):
    with open(filename, 'w') as updated_file:
        updated_file.write(new_contents)


def process_file(filename):
    filename = Path(filename)
    media_folder, post_folder = get_root_folders(filename)
    contents = get_contents(filename)
    config = get_frontmatter(filename)
    img_folder = get_image_folder(filename)
    new_contents = preamble.format(**get_values(config)) + contents
    if img_folder.exists():
        new_contents = edit_image_links(new_contents, Path(img_folder.stem))
        img_folder.rename(media_folder / img_folder.stem)
    update_contents(filename, new_contents)
    filename.rename(post_folder / filename.with_stem(date.today().strftime("%Y-%m-%d-") + filename.stem).name)


if __name__ == '__main__':
    print("Attempting to process the filename passed to the script")
    print("Should be called with the md file generated by RStudio")
    print("Looks for filename_files for media/images")
    print("Also looks for matching Rmd file for frontmatter")
    process_file(sys.argv[1])
    print("Add the marker <!--more--> to the line where you want to break the summary view in the new _posts file")
