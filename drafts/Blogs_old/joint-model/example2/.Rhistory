saveStim <- paste0(saveStim,paste0("{ stimulus: '",stim,"', data: {test_part: 'test', cond: '",cond,"',  correct_response: ",resp," } },"))
}
}
for (i in 1:nrow(data)){
stim <- data$Stim_Name[i]
resp <- ifelse(data$CorrectResponse[i]=="target","responseLeft","responseRight")
cond <- data$TargetType[i]
saveStim <- paste0(saveStim,paste0("{ stimulus: '",stim,"', data: {test_part: 'test', cond: '",cond,"',  correct_response: ",resp," } },"))
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
# stimDir<-("~/Desktop/jatos_mac_java/study_assets_root/nBack/img")
#
# stimNames <- list.files(path=stimDir,pattern = "*.png|*.jpg|*.pdf")
saveStim <- "var test_stim = ["
for (i in 1:nrow(data)){
stim <- data$Stim_Name[i]
resp <- ifelse(data$CorrectResponse[i]=="target","responseLeft","responseRight")
cond <- data$TargetType[i]
saveStim <- paste0(saveStim,paste0("{ stimulus: 'img/",stim,"', data: {test_part: 'test', cond: '",cond,"',  correct_response: ",resp," } },"))
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
rm(list=ls())
setwd("~/Desktop/jatos_mac_java/study_assets_root/nBack")
data <- read.csv("nBackStim.csv")
# stimDir<-("~/Desktop/jatos_mac_java/study_assets_root/nBack/img")
#
# stimNames <- list.files(path=stimDir,pattern = "*.png|*.jpg|*.pdf")
saveStim <- "var test_stim = ["
for (i in 1:nrow(data)){
stim <- data$Stim_Name[i]
resp <- ifelse(data$CorrectResponse[i]=="target","responseLeft","responseRight")
cond <- data$TargetType[i]
saveStim <- paste0(saveStim,paste0("{ stimulus: 'img/",stim,"', data: {test_part: 'test', cond: '",cond,"',  correct_response: ",resp," } },"))
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
###script for getting stimulus names
rm(list=ls())
setwd()
stimDir<-("~/Desktop/jatos_mac_java/study_assets_root/emotion/img")
stimNames <- list.files(path=stimDir,pattern = "*.png|*.jpg|*.pdf")
saveStim <- "var test_stimuli = ["
for (s in stimNames){
gender <- ifelse(grepl("F", s), "female", "male")
emotion <- ifelse(grepl("A", s), "Angry", "Happy")
response <- ifelse(grepl("A", s), "responseLeft", "responseRight")
openness <- ifelse(grepl("O", s), "open", "closed")
saveStim <- paste0(saveStim,paste0("{ stimulus: 'img/",s,"', data: {test_part: 'test', cond: '",emotion,"', correct_response: function(){return", response,"} , Gender: '", gender ,"' , Mouth: '", openness,"'  } },"))
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
stimDir<-("~/Desktop/jatos_mac_java/study_assets_root/emotionDiscrimination/img")
stimNames <- list.files(path=stimDir,pattern = "*.png|*.jpg|*.pdf")
saveStim <- "var test_stimuli = ["
for (s in stimNames){
gender <- ifelse(grepl("F", s), "female", "male")
emotion <- ifelse(grepl("A", s), "Angry", "Happy")
response <- ifelse(grepl("A", s), "responseLeft", "responseRight")
openness <- ifelse(grepl("O", s), "open", "closed")
saveStim <- paste0(saveStim,paste0("{ stimulus: 'img/",s,"', data: {test_part: 'test', cond: '",emotion,"', correct_response: function(){return", response,"} , Gender: '", gender ,"' , Mouth: '", openness,"'  } },"))
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
###script for getting stimulus names
rm(list=ls())
setwd()
stimDir<-("~/Desktop/jatos_mac_java/study_assets_root/emotionDiscrimination/img")
stimNames <- list.files(path=stimDir,pattern = "*.png|*.jpg|*.pdf")
saveStim <- "var test_stimuli = ["
for (s in stimNames){
gender <- ifelse(grepl("F", s), "female", "male")
emotion <- ifelse(grepl("A", s), "Angry", "Happy")
response <- ifelse(grepl("A", s), "responseLeft", "responseRight")
openness <- ifelse(grepl("O", s), "open", "closed")
saveStim <- paste0(saveStim,paste0("{ stimulus: 'img/",s,"', data: {test_part: 'test', cond: '",emotion,"', correct_response: function(){return ", response,"} , Gender: '", gender ,"' , Mouth: '", openness,"'  } },"))
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
rm(list=ls())
setwd("~/Documents/Research/Coding_Experiments/Examples")
data <- read.csv("wgnmkrs_stim.csv")
table(data$COND)
tmp<-split.data.frame(data, data$COND)
ntrials <- 5
NW <- sample(as.character(tmp$'1'$WORD), ntrials*3)
VLF <- sample(as.character(tmp$'2'$WORD), ntrials)
LF <- sample(as.character(tmp$'3'$WORD), ntrials)
HF <- sample(as.character(tmp$'4'$WORD), ntrials)
NW <- cbind(NW, "NW", "non-word")
VLF<- cbind(VLF, "VLF", "word")
LF<- cbind(LF, "LF", "word")
HF<- cbind(HF, "HF", "word")
data <- rbind(NW,VLF,LF,HF)
data <- as.data.frame(data)
names(data)<- c("stimuli", "freq", "cond")
saveStim <- "var test_stimuli = ["
counter<-0
for (i in 1:nrow(data)){
s = data$stimuli[i]
f = data$freq[i]
c = data$cond[i]
resp = ifelse(c == "word", "responseLeft", "responseRight")
if (counter==0){
saveStim <- paste0(saveStim,paste0("{ stimulus: '<div style='font-size:30px;'>",s,"</div>', data: {test_part: 'test', cond: '",f,"', correct_response: function(){return ", resp,"} } }, "))
counter = counter + 1
} else {
saveStim <- paste0(saveStim,paste0("{ stimulus: '<div style='font-size:30px;'>",s,"</div>', data: {test_part: 'test', cond: '",f,"', correct_response: function(){return ", resp,"}  } }, "))
counter = counter + 1
}
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
rm(list=ls())
values <- c(0.47,0.485,0.49,0.51,0.515,0.53)
colour <- c(rep("blue",3), rep("orange", 3))
ntrials <- 20
library(raster)
blue <- rgb(0,25,63,1,max=255)
orange <- rgb(63,25,0,1,max=255)
for (i in 1:length(values)){
for (j in 1:ntrials){
coherence <- values[i]
col <- colour[i]
png(paste0(col, "_", coherence,"_", j, '.png'))
r <- matrix(runif(256)<coherence, ncol=16)
#par(bg = 'black')
#plot(raster(r), col = c("#002563", "#632500"), axes=F, box=F, legend=F)
plot(raster(r), col = c("blue", "orange"), axes=F, box=F, legend=F)
dev.off()
}
}
setwd("~/Desktop/jatos_mac_java/study_assets_root/perceptualDiscrimination/img")
rm(list=ls())
setwd("~/Desktop/jatos_mac_java/study_assets_root/perceptualDiscrimination/img")
values <- c(0.47,0.485,0.49,0.51,0.515,0.53)
colour <- c(rep("blue",3), rep("orange", 3))
ntrials <- 20
library(raster)
blue <- rgb(0,25,63,1,max=255)
orange <- rgb(63,25,0,1,max=255)
for (i in 1:length(values)){
for (j in 1:ntrials){
coherence <- values[i]
col <- colour[i]
png(paste0(col, "_", coherence,"_", j, '.png'))
r <- matrix(runif(256)<coherence, ncol=16)
#par(bg = 'black')
#plot(raster(r), col = c("#002563", "#632500"), axes=F, box=F, legend=F)
plot(raster(r), col = c("blue", "orange"), axes=F, box=F, legend=F)
dev.off()
}
}
stimDir<-("~/Desktop/jatos_mac_java/study_assets_root/perceptualDiscrimination/img")
stimNames <- list.files(path=stimDir,pattern = "*.png|*.jpg|*.pdf")
saveStim <- "var test_stimuli = ["
counter<-0
for (i in 1:length(values)){
for (j in 1:ntrials){
col <- ifelse(values[i]<.5, "blue", "orange")
resp <- ifelse(values[i]<.5, "responseLeft", "responseRight")
saveStim <- paste0(saveStim,paste0("{ stimulus: 'img/",col,"_",values[i],"_",j,".png', data: {test_part: 'test', cond: '",col,"', coherence: '",values[i], "',  correct_response: function(){return ", resp,"} } },"))
counter = counter + 1
}
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
rm(list=ls())
setwd("~/Desktop/jatos_mac_java/study_assets_root/nBack")
data <- read.csv("nBackStim.csv")
# stimDir<-("~/Desktop/jatos_mac_java/study_assets_root/nBack/img")
#
# stimNames <- list.files(path=stimDir,pattern = "*.png|*.jpg|*.pdf")
saveStim <- "var test_stimuli = ["
for (i in 1:nrow(data)){
stim <- data$Stim_Name[i]
resp <- ifelse(data$CorrectResponse[i]=="target","responseLeft","responseRight")
cond <- data$TargetType[i]
saveStim <- paste0(saveStim,paste0("{ stimulus: 'img/",stim,"', data: {test_part: 'test', cond: '",cond,"',  correct_response: function(){return ", resp,"} } },"))
}
saveStim <- paste(saveStim,"];",sep="")
saveStim
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example2/cov.RData")
tmp <- sampled
dev.off()
matplot(t(tmp$samples$theta_mu),type="l")
matplot(t(tmp$samples$subj_ll),type="l")
df <- exp(tmp$samples$theta_mu)
tmp<-as.data.frame(t(df))
tmp2 <- pivot_longer(tmp, cols = everything(),names_to = "Parameter", values_to = "value")
tmp2$Iteration = rep(seq(1:sampled$samples$idx),each = sampled$n_pars)
#ggplot(tmp2, aes(x=Iteration, y=value))+geom_line()+facet_wrap(~Parameter, nrow = sampled$n_pars)+theme_bw()
ggplot(tmp2, aes(x=Iteration, y=value))+geom_line()+facet_wrap(~Parameter, scales = "free")+theme_bw()
library(tidyr)
library(ggplot2)
tmp <- sampled
dev.off()
matplot(t(tmp$samples$theta_mu),type="l")
matplot(t(tmp$samples$subj_ll),type="l")
df <- exp(tmp$samples$theta_mu)
tmp<-as.data.frame(t(df))
tmp2 <- pivot_longer(tmp, cols = everything(),names_to = "Parameter", values_to = "value")
tmp2$Iteration = rep(seq(1:sampled$samples$idx),each = sampled$n_pars)
#ggplot(tmp2, aes(x=Iteration, y=value))+geom_line()+facet_wrap(~Parameter, nrow = sampled$n_pars)+theme_bw()
ggplot(tmp2, aes(x=Iteration, y=value))+geom_line()+facet_wrap(~Parameter, scales = "free")+theme_bw()
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
exp(tmp)
tmp
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example3/fmri.RData")
tmp <- sampled
dev.off()
matplot(t(tmp$samples$theta_mu),type="l")
matplot(t(tmp$samples$subj_ll),type="l")
df <- exp(tmp$samples$theta_mu)
tmp<-as.data.frame(t(df))
tmp2 <- pivot_longer(tmp, cols = everything(),names_to = "Parameter", values_to = "value")
tmp2$Iteration = rep(seq(1:sampled$samples$idx),each = sampled$n_pars)
#ggplot(tmp2, aes(x=Iteration, y=value))+geom_line()+facet_wrap(~Parameter, nrow = sampled$n_pars)+theme_bw()
ggplot(tmp2, aes(x=Iteration, y=value))+geom_line()+facet_wrap(~Parameter, scales = "free")+theme_bw()
ggplot(tmp2, aes(x=Iteration, y=value, colour = Parameter))+geom_line()+theme_bw()
tmp <- sampled
x<-apply(tmp$samples$alpha[1,,-1]!=tmp$samples$alpha[1,,-(tmp$samples$idx)],1,sum)
x[order(x)]
y<- apply(tmp$samples$subj_ll,1,n_distinct)
y[order(y)]
z<- apply(tmp$samples$subj_ll[,tmp$samples$stage=="adapt"],1,n_distinct)
library(dplyr)
z<- apply(tmp$samples$subj_ll[,tmp$samples$stage=="adapt"],1,n_distinct)
z[order(z)]
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
exp(tmp)
tmp
exp(19)
log(19)
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example1/bev.RData")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model")
library(R.matlab)
library(tidyverse)
library(osfr)
library(httr)
library(pmwg)
library(rtdists)
library(fmri)
library(dplyr)
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example1/bev.RData")
##first we look at median parameter estimates
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
tmp
kable(exp(tmp))
?GET
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model")
library(R.matlab)
library(tidyverse)
library(osfr)
library(httr)
library(pmwg)
library(rtdists)
library(fmri)
library(dplyr)
library(kable)
filename <- 'LBA_Forstmann_scanner.mat'
??kable
?kable
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model")
library(R.matlab)
library(tidyverse)
library(osfr)
library(httr)
library(pmwg)
library(rtdists)
library(fmri)
library(dplyr)
library(knitr)
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example1/bev.RData")
inScan <- exp(tmp[1:7])
##first we look at median parameter estimates
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
inScan <- exp(tmp[1:7])
outScan <- exp(tmp[8:14])
rbind(inScan,outScan)
cbind(inScan,outScan)
as.data.frame(cbind(inScan,outScan))
?cbind
cbind(inScan,outScan, make.row.names="pars")
cbind(inScan,outScan, make.row.names=c("b1","b2","b3","A","v1","v2","t0"))
tmp<-cbind(inScan,outScan)
rownames(tmp)<-c("b1","b2","b3","A","v1","v2","t0")
tmp
##then we look at variance-covariance matrix
library(lme4)
colnames(cov)<-pars
##this is the covariance structure
cov<-apply(sampled$samples$theta_sig[,,sampled$samples$idx-1000:sampled$samples$idx] ,1:2, mean)
colnames(cov)<-pars
rownames(cov)<-pars
cor<-cov2sdcor(cov) #transforms covariance to correlation matrix
cor
install.packages("corrplot")
cov<-apply(sampled$samples$theta_sig[,,sampled$samples$idx-1000:sampled$samples$idx] ,1:2, mean)
colnames(cov)<-pars
rownames(cov)<-pars
cor<-cov2sdcor(cov) #transforms covariance to correlation matrix
library(corrplot)
corrplot(cor, method="color")
cor
cor<-sdcov2cor(cov) #transforms covariance to correlation matrix
cor<-cov2cor(cov) #transforms covariance to correlation matrix
library(corrplot)
corrplot(cor, method="color")
cor
cor[1:7,8:14]
corrplot(cor[1:7,8:14], method="color")
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example2/cov.RData")
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example2/cov.RData")
##first we look at median parameter estimates
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
##first we look at median parameter estimates
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
tmp[1:4]<-exp(tmp[1:4])
tmp
##then we look at variance-covariance matrix
library(lme4)
##this is the covariance structure
cov<-apply(sampled$samples$theta_sig[,,sampled$samples$idx-1000:sampled$samples$idx] ,1:2, mean)
colnames(cov)<-pars
rownames(cov)<-pars
cor<-cov2sdcor(cov) #transforms covariance to correlation matrix
cor
cor<-cov2cor(cov) #transforms covariance to correlation matrix
cor
setwd("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example2")
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example2/cov.RData")
tmp[1:4]<-exp(tmp[1:4])
tmp
##then we look at variance-covariance matrix
library(lme4)
##this is the covariance structure
cov<-apply(sampled$samples$theta_sig[,,sampled$samples$idx-1000:sampled$samples$idx] ,1:2, mean)
colnames(cov)<-pars
rownames(cov)<-pars
cor<-cov2cor(cov) #transforms covariance to correlation matrix
cor
pmwg_parHistPrior<- function(samples, bins = 30){
theta <- t(sampled$samples$theta_mu)
theta<-as.data.frame(theta)
theta <- pivot_longer(theta, cols = everything(), names_to = "pars", values_to = "estimate" )
prior_mean <- sampled$prior$theta_mu_mean
prior_var <- diag(sampled$prior$theta_mu_var)
priors <- as.data.frame(cbind(prior_mean,prior_var))
priors$pars <- sampled$par_names
theta <- left_join(theta, priors, by="pars")
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
stat_function(fun = dnorm, args = list(mean = prior_mean, sd = prior_var))+
facet_wrap(~pars, scales = "free_y")+
theme_bw()
}
pmwg_parHistPrior(sampled)
theta <- t(sampled$samples$theta_mu)
theta<-as.data.frame(theta)
theta <- pivot_longer(theta, cols = everything(), names_to = "pars", values_to = "estimate" )
prior_mean <- sampled$prior$theta_mu_mean
prior_var <- diag(sampled$prior$theta_mu_var)
priors <- as.data.frame(cbind(prior_mean,prior_var))
priors$pars <- sampled$par_names
theta <- left_join(theta, priors, by="pars")
View(theta)
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
stat_function(fun = dnorm, args = list(mean = prior_mean, sd = prior_var))+
facet_wrap(~pars, scales = "free_y")+
theme_bw()
bins=30
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
stat_function(fun = dnorm, args = list(mean = prior_mean, sd = prior_var))+
facet_wrap(~pars, scales = "free_y")+
theme_bw()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
stat_function(fun = dnorm, args = list(mean = prior_mean, sd = prior_var))+
theme_bw()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
theme_bw()
theta %>% group_by(pars) %>% mutate(prior = dnorm(mean = prior_mean, sd=prior_var)) %>% ungroup()
theta %>% group_by(pars) %>% mutate(prior = dnorm(1, mean = prior_mean, sd=prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_line(aes(prior, y =..density..), colour = "red") +
theme_bw()
theta<-theta %>% group_by(pars) %>% mutate(prior = dnorm(1, mean = prior_mean, sd=prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_line(aes(prior, y =..density..), colour = "red") +
theme_bw()
ggplot(theta)+
geom_histogram(aes(estimate, y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_line(aes(prior, y =..density..), colour = "red") +
theme_bw()
prior <-theta %>% group_by(pars) %>% summarise(prior = dnorm(1, mean = prior_mean, sd=prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_line(data = prior, aes(prior, y =..density..), colour = "red") +
theme_bw()
load("~/Documents/Research/Modelling Project/Work/pmwg/Blogs/joint-model/example2/cov.RData")
##first we look at median parameter estimates
tmp <- apply(sampled$samples$theta_mu[,sampled$samples$stage=="sample"],1,median)
tmp[1:4]<-exp(tmp[1:4])
tmp
##then we look at variance-covariance matrix
library(lme4)
##this is the covariance structure
cov<-apply(sampled$samples$theta_sig[,,sampled$samples$idx-1000:sampled$samples$idx] ,1:2, mean)
colnames(cov)<-pars
rownames(cov)<-pars
cor<-cov2cor(cov) #transforms covariance to correlation matrix
cor
pmwg_parHistPrior<- function(samples, bins = 30){
theta <- t(sampled$samples$theta_mu)
theta<-as.data.frame(theta)
theta <- pivot_longer(theta, cols = everything(), names_to = "pars", values_to = "estimate" )
prior_mean <- sampled$prior$theta_mu_mean
prior_var <- diag(sampled$prior$theta_mu_var)
priors <- as.data.frame(cbind(prior_mean,prior_var))
priors$pars <- sampled$par_names
theta <- left_join(theta, priors, by="pars")
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(1000, mean = prior_mean, sd = prior_var)) %>% ungroup()
prior <-theta %>% group_by(pars) %>% summarise(prior = dnorm( mean = prior_mean, sd=prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_line(data = prior, aes(prior, y =..density..), colour = "red") +
theme_bw()
}
theta <- t(sampled$samples$theta_mu)
theta<-as.data.frame(theta)
theta <- pivot_longer(theta, cols = everything(), names_to = "pars", values_to = "estimate" )
prior_mean <- sampled$prior$theta_mu_mean
prior_var <- diag(sampled$prior$theta_mu_var)
priors <- as.data.frame(cbind(prior_mean,prior_var))
priors$pars <- sampled$par_names
theta <- left_join(theta, priors, by="pars")
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(1000, mean = prior_mean, sd = prior_var)) %>% ungroup()
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(1000, mean = prior_mean, sd = prior_var), prior_mu = prior_mean, prior_sd=prior_var) %>% ungroup()
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(1000, mean = prior_mean, sd = prior_var), prior_mu = prior_mean) %>% ungroup()
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(1000, mean = prior_mean, sd = prior_var)) %>% ungroup()
prior <-prior %>% group_by(pars) %>% summarise(prior = dnorm(predicted, mean = prior_mean, sd=prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_line(data = prior, aes(prior, y =..density..), colour = "red") +
theme_bw()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_line(data = prior, aes(prior, y =prior), colour = "red") +
theme_bw()
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(1000, mean = prior_mean, sd = prior_var)) %>% ungroup()
View(prior)
ggplot(prior, aes(predicted))+geom_density()+facet_wrap(~pars)
theta <- t(sampled$samples$theta_mu)
theta<-as.data.frame(theta)
theta <- pivot_longer(theta, cols = everything(), names_to = "pars", values_to = "estimate" )
prior_mean <- sampled$prior$theta_mu_mean
prior_var <- diag(sampled$prior$theta_mu_var)
priors <- as.data.frame(cbind(prior_mean,prior_var))
priors$pars <- sampled$par_names
theta <- left_join(theta, priors, by="pars")
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(10000, mean = prior_mean, sd = prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_density(data = prior, aes(predicted), colour = "red") +
theme_bw()
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(100000, mean = prior_mean, sd = prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_density(data = prior, aes(predicted), colour = "red") +
theme_bw()
prior <- theta %>% group_by(pars) %>% summarise(predicted = rnorm(1000000, mean = prior_mean, sd = prior_var)) %>% ungroup()
ggplot(theta, aes(estimate))+
geom_histogram(aes(y =..density..), bins = bins)+
facet_wrap(~pars, scales = "free_y")+
#stat_function(fun = dnorm(mean = prior_mean, sd = prior_var))+
geom_density(data = prior, aes(predicted), colour = "red") +
theme_bw()
